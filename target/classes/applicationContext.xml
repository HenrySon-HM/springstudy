<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

		<!-- DataSource 설정 -->
		<context:property-placeholder location="classpath:config/database.properties"/>
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"></property>
			<property name="url" value="${jdbc.url}"></property>
			<property name="username" value="${jdbc.username}"></property>
			<property name="password" value="${jdbc.password}"></property>
		</bean>
		<!-- Spring JDBC 설정 -->
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		<!-- Transaction 설정 -->
		<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
			<property name="entityManagerFactory" ref="entityManagerFactory"></property>
		</bean>	
		<tx:advice id="txAdvice" transaction-manager="txManager">
			<tx:attributes>
				<tx:method name="get*" read-only="true"/>
				<tx:method name="*"/>
			</tx:attributes>
		</tx:advice>
		<aop:config>
			<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
			<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
		</aop:config>
		<context:component-scan base-package="com.springbook.biz"></context:component-scan>
		
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
			<property name="configLocation" value="classpath:sql-map-config.xml"></property>
		</bean>
		
		<!-- Spring과 JPA 연동 설정 -->
		<bean id="jpaVendorAdapter"
			class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		<bean id="entityManagerFactory"
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
			<property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>
			<property name="packagesToScan" value="com.springbook.biz.board"></property>
			<property name="jpaProperties">
				<props>
					<prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
					<prop key="hibernate.show_sql">true</prop>
					<prop key="hibernate.format_sql">true</prop>
					<prop key="hibernate.use_sql_comments">true</prop>
					<prop key="hibernate.id.new_generator_mappings">true</prop>
					<prop key="hibernate.hbm2ddl.auto">create</prop>
				</props>
			</property>
		</bean>
<!-- AOP xml 설정 		
		<bean id="log" class="com.spingbook.biz.common.AroundAdvice"></bean>
		<aop:config>
			<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
			<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
			<aop:aspect ref="log">
				<aop:before pointcut-ref="allPointcut" method="printLog"/>
			</aop:aspect>
		</aop:config>
-->		
		<!-- <bean id="around" class="com.spingbook.biz.common.AroundAdvice"></bean>
		<aop:config>
			<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
			<aop:aspect ref="around">
				<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
			</aop:aspect>
		</aop:config> -->
		
<!--		<bean id="afterThrowing" class="com.spingbook.biz.common.AfterThrowingAdvice"></bean>
		<aop:config>
			<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
			<aop:aspect ref="afterThrowing">
				<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog"/>
			</aop:aspect>
		</aop:config>
 
		<bean id="afterReturning" class="com.spingbook.biz.common.AfterReturningAdvice"></bean>
		<aop:config>
			<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
			<aop:aspect ref="afterReturning">
				<aop:after-returning pointcut-ref="getPointcut" method="afterLog"/>
			</aop:aspect>
		</aop:config> -->
		
		
		
<!--		<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
			<property name="userDAO" ref="userDAO"></property>
		</bean>
		<bean id="userDAO" class="com.springbook.biz.user.UserDAO"> </bean> -->
		
<!-- 		<context:component-scan base-package="ploymorphism"></context:component-scan>
		<bean id="tv" class="ploymorphism.LgTV"></bean>
		<bean class="ploymorphism.AppleSpeaker"></bean> -->
		
		
<!-- 	<bean id="tv" class="ploymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" /> -->
<!--	<bean id="tv" class="ploymorphism.SamsungTV" lazy-init="true" /> -->
<!--	<bean id="tv" class="ploymorphism.SamsungTV" scope="singleton" /> -->

<!--    생성자 인젝션 이용
		<bean id="tv" class="ploymorphism.SamsungTV" >
			<constructor-arg index="0" ref="apple"></constructor-arg>
			<constructor-arg index="1" value="270000"></constructor-arg>
		</bean> 
-->
<!-- 	Setter 인젝션 이용	
		<bean id="tv" class="ploymorphism.SamsungTV" >
			<property name="speaker" ref="apple"></property>
			<property name="price" value="270000"></property>
		</bean> 

		
		<bean id="tv" class="ploymorphism.SamsungTV" p:speaker-ref="sony" p:price="27000000"/>
		<bean id="sony" class="ploymorphism.SonySpeaker"></bean>
		<bean id="apple" class="ploymorphism.AppleSpeaker"></bean>
		
 		<bean id="collectionBean" class="com.spring.ioc.injection.CollectionBean" >
			<property name="addressList">
				<list>
					<value>서울시 강남구 역삼동</value>
					<value>서울시 강남구 행당동</value>
				</list>
			</property>
		</bean> 
		<bean id="collectionBean" class="com.spring.ioc.injection.CollectionBean" >
			<property name="addressList">
				<map>
					<entry>
						<key><value>고길동</value></key>
						<value>서울시 강남구 역삼동</value>
					</entry>
					<entry>
						<key><value>마이콜</value></key>
						<value>서울시 강서구 화곡동</value>
					</entry>
				</map>
			</property>
		</bean>  -->
</beans>
